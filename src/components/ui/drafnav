'use client';
import Link from 'next/link';
import React, { useState } from 'react';
import {
	Button,
	Layout,
	Menu,
	Dropdown,
	Space,
	Input,
	Row,
	Col,
	Divider,
	Typography,
} from 'antd';
import type { MenuProps } from 'antd';
const { Header, Content, Footer } = Layout;
import { DownOutlined } from '@ant-design/icons';
import styles from './styles.module.css';
import { useDebounced } from '@/redux/hooks';
import { useServicesQuery } from '@/redux/api/serviceApi';
import { ICategory, IService } from '@/types';
import { getUserInfo } from '@/services/auth.service';
import { useCategoriesQuery } from '@/redux/api/category';


const Navbar = () => {
	const query: Record<string, any> = {};
	const [page, setPage] = useState<number>(1);
	const [size, setSize] = useState<number>(10);
	const [sortBy, setSortBy] = useState<string>('');
	const [sortOrder, setSortOrder] = useState<string>('');
	const [searchTerm, setSearchTerm] = useState<string>('');
	const { role } = getUserInfo() as any;
	query['limit'] = size;
	query['page'] = page;
	query['sortBy'] = sortBy;
	query['sortOrder'] = sortOrder;

	const [isDropdownOpen, setIsDropdownOpen] = useState(false);
	const [isNestedDropdownOpen, setIsNestedDropdownOpen] = useState(false);

	const openMainDropdown = () => {
		setIsDropdownOpen(true);
	};

	const closeMainDropdown = () => {
		setIsDropdownOpen(false);
	};

	const toggleDropdown = () => { };
	const OpenNestedToggleDropdown = () => {
		setIsNestedDropdownOpen(true);
	};
	const CloseNestedToggleDropdown = () => {
		setIsNestedDropdownOpen(false);
	};

	const debouncedTerm = useDebounced({
		searchQuery: searchTerm,
		delay: 600,
	});
	console.log('roel', role);

	if (!!debouncedTerm) {
		query['searchTerm'] = debouncedTerm;
	}
	const { data: categoriesData } = useCategoriesQuery({ ...query });
	console.log(categoriesData);

	const categories: ICategory[] = (categoriesData?.categories ||
		[]) as ICategory[];

	const items: MenuProps['items'] = categories
		? categories.map((item: { title: string; }, index) => {
			const element = {
				key: index.toString(),
				label: item.title,
			};
			// @ts-ignore
			const child = item?.courses?.map((ele, courseIndex) => {
				return {
					key: index.toString() + courseIndex.toString(),
					// label: <Link href={ `/services/course/${ele.id}`}> { ele.title }  </Link> ;
					// label: <Link href={ `/${role}`; }> Account Profile < /Link>,
				};


			}

		// @ts-ignore
				element['children'] = child;

			return element;
		}

		)




		// 	const element = {
		// 		key: index.toString(),
		// 		label: item.title,
		// 	};
		// 	// @ts-ignore
		// 	const child = item?.courses?.map((ele, courseIndex) => {
		// 		return {
		// 			key: index.toString() + courseIndex.toString(),
		// 			label: <Link href={ `/services/course/${ele.id}` }> { ele.title } < /Link>
		// 	}
		// }




		[];

	console.log('DATA is', items);
	return (
		<div>
		<div className= 'pt-4 bg-slate-300' >
		<Row gutter={ [8, 8]; }>
			<Col md={ 0; } lg = { 12} > </Col>
				< Col md = { 0} lg = { 12} >
					<Row justify='end' >
						<Input
                type='text';
	size = 'middle';
	placeholder = 'Search...';
	style = {{ width: '40%'; }
};
onChange = {(e) => {
	setSearchTerm(e.target.value);
}}
/>
	< /Row>
	< /Col>
	< Col md = { 24} lg = { 4} >
		<Row justify='space-between' >
			<h2>
			<Link
                  href='/';
style = {{
	color: 'white',
		backgroundColor: '#404040',
			padding: '5px 10px',
				borderRadius: '3px',
					whiteSpace: 'nowrap',
                  }}
className = 'text-lg font-bold'
	>
	MSP Tutoring
		< /Link>
		< /h2>
		< /Row>
		< /Col>

		< Col md = { 24} lg = { 16} >
			<Row justify='center' >
				<div className='font-bold text-normal flex list-none' >
					<Link href={ '/services'; }> All Services < /Link>;;;;
{
	!role ?? <Link href={ role; }> Dashboard < /Link>};;;;
	{/* DROPDOWN */ }

	<li>
		<button
                    onMouseEnter={ openMainDropdown; }
	onMouseLeave = { closeMainDropdown };
	className = {`    w-44 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium text-sm px-5 pb-10 text-center inline-flex items-center  `;
}
type = 'button'
	>
	Dropdown button
		< /button>

		< ul;
onMouseEnter = { openMainDropdown };
onMouseLeave = { closeMainDropdown };
className = {`z-10 ${isDropdownOpen ? 'block' : 'hidden'
	}  bg-white divide-y divide-gray-100  shadow w-44 dark:bg-red-400  text-sm text-gray-700 dark:text-gray-200 absolute top-18`}
                  >
{
	categories.map((items) => (
		<li key= { items.id } className = 'relative' >
		<Link
                          href='/'
                          className = ' flex items-center justify-between w-full px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-800 dark:hover:text-white  '
		>
		{ items.title }
		< /Link>

		< ul
                          className = {`z-10 ${isNestedDropdownOpen ? 'block' : ''
			}   divide-y divide-gray-100 text-gray-700  text-sm  shadow w-44 bg-green-300 absolute    `}
	>
	{ items?.courses?.map((course: any) => {
	console.log('course--', course.title);

	return (
		<li key= { items.id } >
		<Link
                                  href='#';
	className = 'block px-4 py-2 hover:bg-gray-100  '
		>
		{ course?.title }
		< /Link>
		< /li>
                            );
})}
</ul>
	< /li>
                    ))}

{/*  */ }
</ul>
	< /li>
	< /div>
	< /Row>
	< /Col>

	< Col md = { 24} lg = { 4} >
		<Row justify='end' >
			<Link
                style={
	{
		textDecoration: 'none',
			color: 'white',
				fontSize: '16px',
                }
}
href = '/login'
	>
	<Button
                  style={
	{
		marginLeft: '15px',
                  }
}
type = 'primary';
ghost
	>
	LOGIN
	< /Button>
	< /Link>
	< /Row>
	< /Col>
	< /Row>
	< /div>
	< /div>
  );
};

export default Navbar;




'use client';
import { useCategoriesQuery } from '@/redux/api/category';
import { ICategory } from '@/types';
import { HomeOutlined, RightOutlined } from '@ant-design/icons';
import Link from 'next/link';
import React, { useState } from 'react';

const CategoryDropdown = () => {
	const { data: categoriesData } = useCategoriesQuery({});

	const categories: ICategory[] = (categoriesData?.categories ||
		[]) as ICategory[];

	return (
		<ul className= '  sub-menu-1 bg-green-600 md:absolute ' >
		<ul className='     list-none ' >
		{
			categories.map((items) => (
				<li
            key= { items.id }
            className = '     text-left bg-transparent hover-me hover:text-orange-600 '
				>
				<Link className='block w-full' href = '/' >
				{ items.title }
				< RightOutlined className = 'float-right' />

				<li className='submenu-2 bg-green-600 md:absolute ' >
			<ul className=' list-none ' >
			{ items?.courses?.map((service: any) => (
				<li
                      key= { service.key };
className = '     text-left bg-transparent  '
	>
	<Link href='/' > { service.title } < /Link>
		< /li>
                  ))}
</ul>
	< /li>
	< /Link>
	< /li>
        ))}
</ul>
	< /ul>
  );
};

export default CategoryDropdown;



//nav


<Col xs={ 24; } md = { 24} lg = { 24} >
	<div className='bg-green-600 text-center menu-bar w-full  ' >
		<ul className='md:inline-flex items-center justify-center list-none text-white  ' >
			<li className='md:w-28 m-4 p-4    hover:bg-green-900' >
				<Link className='text-white ' href = '/' >
					<HomeOutlined className='mr-2' />
						Home
						< /Link>
						< /li>

						< li className = 'md:w-28 m-4 p-4  hover:bg-green-900   ' >
							<a className='text-white border-2 ' > About < /a>

								< CategoryDropdown />
								</li>
								< li className = 'w-28 m-4 p-4  hover:bg-green-900' >
									<Link className='text-white' href = '/' >
										Dashboard
										< /Link>
										< /li>
										< /ul>
										< /div>
										< /Col>;;;;